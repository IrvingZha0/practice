// 运算符	           用法	    描述
// 按位与（AND）	   a & b	对于每一个比特位，只有两个操作数相应的比特位都是 1 时，结果才为 1，否则为 0。
// 按位或（OR）	       a | b	对于每一个比特位，当两个操作数相应的比特位至少有一个 1 时，结果为 1，否则为 0。
// 按位异或（XOR）	   a ^ b	对于每一个比特位，当两个操作数相应的比特位有且只有一个 1 时，结果为 1，否则为 0。
// 按位非（NOT）	   ~ a	    反转操作数的比特位，即 0 变成 1，1 变成 0。
// 左移（Left shift） a << b	将 a 的二进制形式向左移 b (<32) 比特位，右边用 0 填充。
// 有符号右移	       a >> b	将 a 的二进制表示向右移 b (<32) 位，丢弃被移出的位。
// 无符号右移	       a >>> b	将 a 的二进制表示向右移 b (<32) 位，丢弃被移出的位，并使用 0 在左侧填充。

// > 'string' >>> 0
// < 0
// > null >>> 0
// < 0
// > undefined >>> 0
// < 0
// > function a (){};  a >>> 0
// < 0
// > 123123 >>> 0
// < 123123
// > -1212 >>> 0
// < 4294966084
// > []>>> 0
// < 0
// > var a = {}; a>>> 0
// < 0
// > 45.2 >>> 0
// < 45


var len = this.length >>> 0;
// 这么写确实比 var len = this.length || 0; 要好很多，在遇到意外的 this 时，它不会返回 {}、[] 等意外的值。（IE 6+ 支持）
console.log(len)